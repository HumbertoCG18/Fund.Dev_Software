package com.barca;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.CsvSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import static org.junit.jupiter.api.Assertions.*;

@DisplayName("üìã Testes da classe Barca")
class BarcaTest {
    private static final Logger logger = LoggerFactory.getLogger(BarcaTest.class);
    
    private Barca barca;
    private MockRelogio relogio;
    private final double PRECO_BASE = 100.0;

    @BeforeEach
    void setUp() {
        relogio = new MockRelogio();
        relogio.setHorario(10, 0); // Hor√°rio comercial padr√£o
        barca = new Barca(relogio, PRECO_BASE);
        logger.info("Configurado novo teste com hora: {}:{} e pre√ßo base: {}", 
                   relogio.getHora(), relogio.getMinuto(), PRECO_BASE);
    }

    // 1. TESTES DE FORMATO E LIMITES DE ASSENTOS

    @Test
    @DisplayName("‚úì Deve rejeitar assentos com formato inv√°lido")
    void testAssentoFormatoInvalido() {
        logger.info("Iniciando testes de formato inv√°lido de assentos");
        
        assertEquals(-1.0, barca.defineAssento("F1A1"), 
                    "Formato inv√°lido 'F1A1' deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento("F01A1"), 
                    "Formato inv√°lido 'F01A1' deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento("F01A001"), 
                    "Formato inv√°lido 'F01A001' deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento("X01A01"), 
                    "Formato inv√°lido 'X01A01' deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento(null), 
                    "Formato inv√°lido 'null' deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento(""), 
                    "Formato inv√°lido '' deve retornar c√≥digo -1.0");
        
        logger.info("Testes de formato inv√°lido conclu√≠dos com sucesso");
    }

    @Test
    @DisplayName("‚úì Deve rejeitar assentos fora dos limites permitidos")
    void testAssentoForaDosLimites() {
        logger.info("Iniciando testes de assentos fora dos limites");
        
        assertEquals(-1.0, barca.defineAssento("F00A01"), 
                    "Fileira 0 n√£o existe e deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento("F61A01"), 
                    "Fileira 61 n√£o existe e deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento("F01A00"), 
                    "Assento 0 n√£o existe e deve retornar c√≥digo -1.0");
        assertEquals(-1.0, barca.defineAssento("F01A21"), 
                    "Assento 21 n√£o existe e deve retornar c√≥digo -1.0");
        
        logger.info("Testes de assentos fora dos limites conclu√≠dos com sucesso");
    }

    // 2. TESTES DE ASSENTOS OCUPADOS

    @Test
    @DisplayName("‚úì Deve rejeitar assentos j√° ocupados")
    void testOcupacaoAssento() {
        logger.info("Iniciando teste de ocupa√ß√£o de assento");
        
        double preco = barca.defineAssento("F01A01");
        logger.info("Assento F01A01 definido, pre√ßo retornado: {}", preco);
        assertTrue(preco > 0, "Primeira marca√ß√£o deve retornar pre√ßo > 0");
        
        double resultado = barca.defineAssento("F01A01");
        logger.info("Tentativa de redefinir assento F01A01, resultado: {}", resultado);
        assertEquals(-2.0, resultado, "Assento j√° ocupado deve retornar erro -2.0");
        
        logger.info("Teste de ocupa√ß√£o de assento conclu√≠do com sucesso");
    }

    @Test
    @DisplayName("‚úì Deve rejeitar assentos ocupados arbitrariamente")
    void testOcupacaoArbitraria() {
        logger.info("Iniciando teste de ocupa√ß√£o arbitr√°ria");
        
        barca.ocupacaoArbitraria("F05A10");
        logger.info("Assento F05A10 ocupado arbitrariamente");
        
        assertEquals(-2.0, barca.defineAssento("F05A10"), 
                    "Assento ocupado arbitrariamente deve estar indispon√≠vel");
        
        logger.info("Teste de ocupa√ß√£o arbitr√°ria conclu√≠do com sucesso");
    }

    // 3. TESTES DE REGRAS DE DISTRIBUI√á√ÉO DE PESO

    @Test
    @DisplayName("‚úì Deve aplicar regras para primeiros 100 passageiros")
    void testDistribuicaoPesoPrimeiros100() {
        logger.info("Iniciando teste de distribui√ß√£o de peso para primeiros 100 passageiros");
        
        // Teste para fileira v√°lida (1-20)
        double resultado = barca.defineAssento("F01A01");
        logger.info("Primeiro passageiro na fileira 1, resultado: {}", resultado);
        assertTrue(resultado > 0, "Primeiro passageiro deve conseguir assento na fileira 1");
        
        // Teste para fileira inv√°lida (21-60)
        resultado = barca.defineAssento("F21A01");
        logger.info("Tentativa de segundo passageiro na fileira 21, resultado: {}", resultado);
        assertEquals(-3.0, resultado, "Primeiro passageiro n√£o deve sentar na fileira 21");
        
        logger.info("Teste de distribui√ß√£o para primeiros 100 passageiros conclu√≠do");
    }

    @Test
    @DisplayName("‚úì Deve aplicar regras para pr√≥ximos 100 passageiros")
    void testDistribuicaoPesoProximos100() {
        logger.info("Iniciando teste de distribui√ß√£o de peso para pr√≥ximos 100 passageiros");
        
        // Ocupa os primeiros 99 assentos
        logger.info("Ocupando primeiros 99 assentos arbitrariamente nas fileiras 1-20");
        for (int i = 1; i <= 99; i++) {
            String fileira = String.format("%02d", (i % 20 == 0) ? 20 : i % 20);
            String assento = String.format("%02d", ((i - 1) / 20) + 1);
            barca.ocupacaoArbitraria("F" + fileira + "A" + assento);
        }
        
        // Teste para 100¬∫ passageiro na fileira v√°lida (1-20)
        double resultado = barca.defineAssento("F01A06");
        logger.info("100¬∫ passageiro na fileira 1, resultado: {}", resultado);
        assertTrue(resultado > 0, "100¬∫ passageiro deve conseguir assento na fileira 1-20");
        
        // Teste para 101¬∫ passageiro na fileira v√°lida (40-60)
        resultado = barca.defineAssento("F40A01");
        logger.info("101¬∫ passageiro na fileira 40, resultado: {}", resultado);
        assertTrue(resultado > 0, "101¬∫ passageiro deve conseguir assento na fileira 40-60");
        
        // Teste para 101¬∫ passageiro na fileira inv√°lida (1-39)
        resultado = barca.defineAssento("F21A01");
        logger.info("Tentativa de 102¬∫ passageiro na fileira 21, resultado: {}", resultado);
        assertEquals(-3.0, resultado, "102¬∫ passageiro n√£o deve sentar na fileira 21-39");
        
        logger.info("Teste de distribui√ß√£o para pr√≥ximos 100 passageiros conclu√≠do");
    }

    @Test
    @DisplayName("‚úì Deve permitir qualquer fileira ap√≥s 200 passageiros")
    void testDistribuicaoPesoDemaisPassageiros() {
        logger.info("Iniciando teste de distribui√ß√£o de peso para demais passageiros (ap√≥s 200)");
        
        // Ocupa os primeiros 200 assentos arbitrariamente
        logger.info("Ocupando primeiros 200 assentos arbitrariamente");
        for (int i = 1; i <= 200; i++) {
            String fileira, assento;
            if (i <= 100) {
                fileira = String.format("%02d", (i % 20 == 0) ? 20 : i % 20);
                assento = String.format("%02d", ((i - 1) / 20) + 1);
            } else {
                fileira = String.format("%02d", 40 + ((i - 101) % 21));
                assento = String.format("%02d", ((i - 101) / 21) + 1);
            }
            barca.ocupacaoArbitraria("F" + fileira + "A" + assento);
        }
        
        logger.info("200 assentos ocupados. Testando regra para demais passageiros");

        // Teste para 201¬∫ passageiro em fileira anteriormente bloqueada
        double resultado = barca.defineAssento("F21A01");
        logger.info("201¬∫ passageiro na fileira 21, resultado: {}", resultado);
        assertTrue(resultado > 0, "O 201¬∫ passageiro deve poder sentar em qualquer fileira");
        
        // Teste para 202¬∫ passageiro em outra fileira anteriormente bloqueada
        resultado = barca.defineAssento("F30A01");
        logger.info("202¬∫ passageiro na fileira 30, resultado: {}", resultado);
        assertTrue(resultado > 0, "O 202¬∫ passageiro deve poder sentar em qualquer fileira");
        
        logger.info("Teste de distribui√ß√£o para demais passageiros conclu√≠do com sucesso");
    }

    // 4. TESTES DE C√ÅLCULO DE PRE√áO EM DIFERENTES HOR√ÅRIOS

    @ParameterizedTest(name = "Hor√°rio {0}:{1} ‚Üí Pre√ßo deve ser {2}")
    @CsvSource({
        "8, 0, 100.0",  // 8:00 - hor√°rio comercial
        "12, 0, 100.0", // 12:00 - hor√°rio comercial
        "14, 0, 100.0", // 14:00 - hor√°rio comercial
        "18, 0, 100.0"  // 18:00 - hor√°rio comercial
    })
    @DisplayName("üìä Pre√ßos em hor√°rio comercial padr√£o (pre√ßo base)")
    void testPrecoHorarioComercialPadrao(int hora, int minuto, double precoEsperado) {
        logger.info("Testando pre√ßo no hor√°rio comercial: {}:{}", hora, minuto);
        relogio.setHorario(hora, minuto);
        
        double preco = barca.defineAssento("F01A10");
        logger.info("Pre√ßo calculado: {}, esperado: {}", preco, precoEsperado);
        
        assertEquals(precoEsperado, preco, 0.01, 
                    String.format("√Äs %d:%02d o pre√ßo deve ser %.2f", hora, minuto, precoEsperado));
    }

    @ParameterizedTest(name = "Hor√°rio {0}:{1} ‚Üí Pre√ßo deve ser {2}")
    @CsvSource({
        "12, 1, 110.0",  // 12:01 - hor√°rio de almo√ßo
        "13, 59, 110.0", // 13:59 - hor√°rio de almo√ßo
        "18, 1, 110.0",  // 18:01 - in√≠cio da noite
        "19, 59, 110.0"  // 19:59 - in√≠cio da noite
    })
    @DisplayName("üìä Pre√ßos em hor√°rio de almo√ßo/in√≠cio da noite (+10%)")
    void testPrecoHorarioAlmocoNoite(int hora, int minuto, double precoEsperado) {
        logger.info("Testando pre√ßo no hor√°rio almo√ßo/in√≠cio da noite: {}:{}", hora, minuto);
        relogio.setHorario(hora, minuto);
        
        double preco = barca.defineAssento("F01A11");
        logger.info("Pre√ßo calculado: {}, esperado: {}", preco, precoEsperado);
        
        assertEquals(precoEsperado, preco, 0.01, 
                    String.format("√Äs %d:%02d o pre√ßo deve ser %.2f", hora, minuto, precoEsperado));
    }

    @ParameterizedTest(name = "Hor√°rio {0}:{1} ‚Üí Pre√ßo deve ser {2}")
    @CsvSource({
        "20, 0, 120.0",  // 20:00 - hor√°rio noturno
        "22, 30, 120.0", // 22:30 - hor√°rio noturno
        "23, 59, 120.0"  // 23:59 - hor√°rio noturno
    })
    @DisplayName("üìä Pre√ßos em hor√°rio noturno (+20%)")
    void testPrecoHorarioNoturno(int hora, int minuto, double precoEsperado) {
        logger.info("Testando pre√ßo no hor√°rio noturno: {}:{}", hora, minuto);
        relogio.setHorario(hora, minuto);
        
        double preco = barca.defineAssento("F01A12");
        logger.info("Pre√ßo calculado: {}, esperado: {}", preco, precoEsperado);
        
        assertEquals(precoEsperado, preco, 0.01, 
                    String.format("√Äs %d:%02d o pre√ßo deve ser %.2f", hora, minuto, precoEsperado));
    }

    @ParameterizedTest(name = "Hor√°rio {0}:{1} ‚Üí Pre√ßo deve ser {2}")
    @CsvSource({
        "0, 0, 150.0",   // 00:00 - madrugada
        "3, 30, 150.0",  // 03:30 - madrugada
        "7, 59, 150.0"   // 07:59 - madrugada
    })
    @DisplayName("üìä Pre√ßos em hor√°rio de madrugada (+50%)")
    void testPrecoHorarioMadrugada(int hora, int minuto, double precoEsperado) {
        logger.info("Testando pre√ßo no hor√°rio de madrugada: {}:{}", hora, minuto);
        relogio.setHorario(hora, minuto);
        
        double preco = barca.defineAssento("F01A13");
        logger.info("Pre√ßo calculado: {}, esperado: {}", preco, precoEsperado);
        
        assertEquals(precoEsperado, preco, 0.01, 
                    String.format("√Äs %d:%02d o pre√ßo deve ser %.2f", hora, minuto, precoEsperado));
    }

    // 5. TESTES DE VALORES LIMITE PARA FAIXAS DE HOR√ÅRIO

    @Test
    @DisplayName("‚ö†Ô∏è Deve calcular pre√ßo corretamente nos limites das faixas de hor√°rio")
    void testValoresLimiteHorario() {
        logger.info("Iniciando teste de valores limite entre faixas de hor√°rio");
        
        // Madrugada ‚Üí Comercial
        relogio.setHorario(7, 59);
        assertEquals(PRECO_BASE * 1.5, barca.defineAssento("F02A01"), 0.01,
                    "√Äs 7:59 o pre√ßo deve ter aumento de 50%");
        
        relogio.setHorario(8, 0);
        assertEquals(PRECO_BASE, barca.defineAssento("F02A02"), 0.01,
                    "√Äs 8:00 o pre√ßo deve ser o valor base");

        // Comercial ‚Üí Almo√ßo
        relogio.setHorario(12, 0);
        assertEquals(PRECO_BASE, barca.defineAssento("F02A03"), 0.01,
                    "√Äs 12:00 o pre√ßo deve ser o valor base");
        
        relogio.setHorario(12, 1);
        assertEquals(PRECO_BASE * 1.1, barca.defineAssento("F02A04"), 0.01,
                    "√Äs 12:01 o pre√ßo deve ter aumento de 10%");

        // Almo√ßo ‚Üí Comercial
        relogio.setHorario(13, 59);
        assertEquals(PRECO_BASE * 1.1, barca.defineAssento("F02A05"), 0.01,
                    "√Äs 13:59 o pre√ßo deve ter aumento de 10%");
        
        relogio.setHorario(14, 0);
        assertEquals(PRECO_BASE, barca.defineAssento("F02A06"), 0.01,
                    "√Äs 14:00 o pre√ßo deve ser o valor base");

        // Comercial ‚Üí Noite
        relogio.setHorario(18, 0);
        assertEquals(PRECO_BASE, barca.defineAssento("F02A07"), 0.01,
                    "√Äs 18:00 o pre√ßo deve ser o valor base");
        
        relogio.setHorario(18, 1);
        assertEquals(PRECO_BASE * 1.1, barca.defineAssento("F02A08"), 0.01,
                    "√Äs 18:01 o pre√ßo deve ter aumento de 10%");

        // Noite ‚Üí Noturno
        relogio.setHorario(19, 59);
        assertEquals(PRECO_BASE * 1.1, barca.defineAssento("F02A09"), 0.01,
                    "√Äs 19:59 o pre√ßo deve ter aumento de 10%");
        
        relogio.setHorario(20, 0);
        assertEquals(PRECO_BASE * 1.2, barca.defineAssento("F02A10"), 0.01,
                    "√Äs 20:00 o pre√ßo deve ter aumento de 20%");

        // Noturno ‚Üí Madrugada
        relogio.setHorario(23, 59);
        assertEquals(PRECO_BASE * 1.2, barca.defineAssento("F02A11"), 0.01,
                    "√Äs 23:59 o pre√ßo deve ter aumento de 20%");
        
        relogio.setHorario(0, 0);
        assertEquals(PRECO_BASE * 1.5, barca.defineAssento("F02A12"), 0.01,
                    "√Äs 0:00 o pre√ßo deve ter aumento de 50%");
        
        logger.info("Teste de valores limite de hor√°rio conclu√≠do com sucesso");
    }
}